{"version":3,"sources":["Form.js","App.js","index.js"],"names":["MyTextInput","label","props","useField","field","meta","htmlFor","name","touched","error","className","MyCheckbox","children","type","CustomForm","initialValues","email","amount","currency","text","terms","validationSchema","Yup","min","max","required","oneOf","onSubmit","values","console","log","JSON","stringify","id","autoComplete","component","as","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAGMA,EAAc,SAAH,GAA6B,IAAvBC,EAAK,EAALA,MAAUC,EAAK,2BACZC,YAASD,GAAM,mBAA9BE,EAAK,KAAEC,EAAI,KAClB,OACE,qCACE,uBAAOC,QAASJ,EAAMK,KAAK,SAAEN,IAC7B,iDAAWG,GAAWF,IACrBG,EAAKG,SAAWH,EAAKI,MACpB,qBAAKC,UAAU,QAAO,SAAEL,EAAKI,QAC3B,SAKNE,EAAa,SAAH,GAAgC,IAA1BC,EAAQ,EAARA,SAAaV,EAAK,8BACdC,YAAS,2BAAKD,GAAK,IAAEW,KAAM,cAAa,mBAAvDT,EAAK,KAAEC,EAAI,KAClB,OACE,qCACE,wBAAOK,UAAU,WAAU,UACvB,+CAAOG,KAAK,YAAeT,GAAWF,IACrCU,KAEJP,EAAKG,SAAWH,EAAKI,MACpB,qBAAKC,UAAU,QAAO,SAAEL,EAAKI,QAC3B,SA4FGK,EAvFI,WAEf,OACI,cAAC,IAAM,CACPC,cAAiB,CACbR,KAAM,GACNS,MAAO,GACPC,OAAQ,EACRC,SAAU,GACVC,KAAM,GACNC,OAAO,GAEXC,iBAAoBC,IAAW,CAC3Bf,KAAMe,MACGC,IAAI,EAAG,2KACPC,IAAI,GAAI,8LACRC,SAAS,sGAClBT,MAAOM,MACEN,MAAM,iHACNS,SAAS,sGAClBR,OAAQK,MACCG,SAAS,qGACTF,IAAI,EAAG,iDACPC,IAAI,IAAQ,sDACrBN,SAAUI,MACDG,SAAS,yFAClBN,KAAMG,MACGC,IAAI,GAAI,mGACRC,IAAI,IAAK,oGAClBJ,MAAOE,MACEG,SAAS,iHACTC,MAAM,EAAC,GAAO,mHAE3BC,SAAY,SAAAC,GAAM,OAAIC,QAAQC,IAAIC,KAAKC,UAAUJ,EAAQ,KAAM,KAAI,SAE/D,eAAC,IAAI,CAAClB,UAAU,OAAM,UAClB,uKACA,cAAC,EAAW,CACRT,MAAM,8CACNgC,GAAG,OACH1B,KAAK,OACLM,KAAK,OACLqB,aAAa,QAEjB,cAAC,EAAW,CACRjC,MAAM,0DACNgC,GAAG,QACH1B,KAAK,QACLM,KAAK,QACLqB,aAAa,QAEjB,uBAAO5B,QAAQ,SAAQ,0EACvB,cAAC,IAAK,CACF2B,GAAG,SACH1B,KAAK,SACLM,KAAK,SACLqB,aAAa,QAEjB,cAAC,IAAY,CAACC,UAAU,MAAMzB,UAAU,QAAQH,KAAK,WACrD,uBAAOD,QAAQ,WAAU,kDACzB,eAAC,IAAK,CACF2B,GAAG,WACH1B,KAAK,WACL6B,GAAG,SAAQ,UAEP,wBAAQC,MAAM,GAAE,mGAChB,wBAAQA,MAAM,MAAK,iBACnB,wBAAQA,MAAM,MAAK,iBACnB,wBAAQA,MAAM,MAAK,oBAE3B,cAAC,IAAY,CAACF,UAAU,MAAMzB,UAAU,QAAQH,KAAK,aACrD,uBAAOD,QAAQ,OAAM,6FACrB,cAAC,IAAK,CACF2B,GAAG,OACH1B,KAAK,OACL6B,GAAG,aAEP,cAAC,IAAY,CAACD,UAAU,MAAMzB,UAAU,QAAQH,KAAK,SACrD,cAAC,EAAU,CAACA,KAAK,QAAO,kQAGxB,wBAAQM,KAAK,SAAQ,0ECrGtByB,MARf,WACE,OACE,qBAAK5B,UAAU,MAAK,SAChB,cAAC,EAAU,OCFnB6B,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,U","file":"static/js/main.89591dbb.chunk.js","sourcesContent":["import { Formik, Field, Form, ErrorMessage, useField } from 'formik';\nimport * as Yup from 'yup';\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n      <>\n        <label htmlFor={props.name}>{label}</label>\n        <input {...field} {...props} />\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n      </>\n    );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n    const [field, meta] = useField({ ...props, type: 'checkbox' });\n    return (\n      <>\n        <label className=\"checkbox\">\n            <input type=\"checkbox\" {...field} {...props} />\n            {children}\n        </label>\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n      </>\n    );\n  };\n\nconst CustomForm = () => {\n\n    return (\n        <Formik\n        initialValues = {{\n            name: '',\n            email: '',\n            amount: 0,\n            currency: '',\n            text: '',\n            terms: false\n        }}\n        validationSchema = {Yup.object({\n            name: Yup.string()\n                    .min(2, 'Минимум 2 символа для заполнения')\n                    .max(20, 'Максиммум 20 символов для заполнения')\n                    .required('Обязательное поле!'),\n            email: Yup.string()\n                    .email('Неправильный email адрес')\n                    .required('Обязательное поле!'),\n            amount: Yup.number()\n                    .required('Сумма обязательна')\n                    .min(5, 'Не менее 5')\n                    .max(100000, 'Не более 100000'),\n            currency: Yup.string()\n                    .required('Выберите валюту'),\n            text: Yup.string()\n                    .min(10, 'Не менее 10 символов')\n                    .max(400, 'Не более 400 символов'),\n            terms: Yup.boolean()\n                    .required('Необходимо согласие')\n                    .oneOf([true], \"Необходимо согласие\"),\n        })}\n        onSubmit = {values => console.log(JSON.stringify(values, null, 2))}\n        >\n            <Form className=\"form\">\n                <h2>Отправить пожертвование</h2>\n                <MyTextInput\n                    label=\"Ваше имя\"\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                />\n                <MyTextInput\n                    label=\"Ваша почта\"\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    autoComplete=\"off\"\n                />\n                <label htmlFor=\"amount\">Количество</label>\n                <Field\n                    id=\"amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    autoComplete=\"off\"\n                />\n                <ErrorMessage component=\"div\" className=\"error\" name=\"amount\"/>\n                <label htmlFor=\"currency\">Валюта</label>\n                <Field\n                    id=\"currency\"\n                    name=\"currency\"\n                    as=\"select\"\n                    >\n                        <option value=\"\">Выберите валюту</option>\n                        <option value=\"USD\">USD</option>\n                        <option value=\"UAH\">UAH</option>\n                        <option value=\"RUB\">RUB</option>\n                </Field>\n                <ErrorMessage component=\"div\" className=\"error\" name=\"currency\"/>\n                <label htmlFor=\"text\">Ваше сообщение</label>\n                <Field \n                    id=\"text\"\n                    name=\"text\"\n                    as=\"textarea\"\n                />\n                <ErrorMessage component=\"div\" className=\"error\" name=\"text\"/>\n                <MyCheckbox name=\"terms\">\n                    Соглашаетесь с политикой конфиденциальности?\n                </MyCheckbox>\n                <button type=\"submit\">Отправить</button>\n            </Form>\n        </Formik>\n    )\n}\n\nexport default CustomForm;","import './app.scss';\nimport CustomForm from './Form';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <CustomForm/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}